name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        # Store the PEM key with proper formatting
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2-key.pem
        chmod 600 ~/.ssh/ec2-key.pem
        # Disable strict host key checking for deployment
        echo "Host *
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null" > ~/.ssh/config
          
    - name: Debug SSH connection
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        echo "Testing connection to $EC2_HOST as user $EC2_USERNAME..."
        ssh -i ~/.ssh/ec2-key.pem $EC2_USERNAME@$EC2_HOST 'echo SSH connection successful; echo User home: $HOME; ls -la $HOME'

    - name: Copy files to EC2 using SCP
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        # First create the app directory structure
        ssh -i ~/.ssh/ec2-key.pem $EC2_USERNAME@$EC2_HOST "mkdir -p \$HOME/app/backend"
        
        # Use scp instead of rsync
        echo "Copying backend directory..."
        scp -i ~/.ssh/ec2-key.pem -r ./backend/* $EC2_USERNAME@$EC2_HOST:$HOME/app/backend/
        
        echo "Copying docker-compose.yml..."
        scp -i ~/.ssh/ec2-key.pem ./docker-compose.yml $EC2_USERNAME@$EC2_HOST:$HOME/app/
        
        echo "Copying Dockerfile..."
        scp -i ~/.ssh/ec2-key.pem ./Dockerfile $EC2_USERNAME@$EC2_HOST:$HOME/app/

    - name: Install Docker and Docker Compose
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        ssh -i ~/.ssh/ec2-key.pem $EC2_USERNAME@$EC2_HOST "
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            echo 'Installing Docker...'
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
            curl -fsSL https://download.docker.com/linux/debian/gpg | sudo apt-key add -
            sudo add-apt-repository 'deb [arch=amd64] https://download.docker.com/linux/debian buster stable'
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker \$USER
            echo 'Docker installation completed'
          else
            echo 'Docker is already installed'
          fi
          
          # Install Docker Compose v2
          if ! command -v docker-compose &> /dev/null; then
            echo 'Installing Docker Compose...'
            DOCKER_COMPOSE_VERSION=\$(curl -s https://api.github.com/repos/docker/compose/releases/latest | grep 'tag_name' | cut -d\" -f4)
            sudo mkdir -p /usr/local/lib/docker/cli-plugins
            sudo curl -SL https://github.com/docker/compose/releases/download/\${DOCKER_COMPOSE_VERSION}/docker-compose-linux-x86_64 -o /usr/local/lib/docker/cli-plugins/docker-compose
            sudo chmod +x /usr/local/lib/docker/cli-plugins/docker-compose
            sudo ln -sf /usr/local/lib/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose
            echo 'Docker Compose installation completed'
          else
            echo 'Docker Compose is already installed'
          fi
        "

    - name: Deploy with Docker Compose
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        DATABASE_URL: ${{ secrets.DATABASE_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
      run: |
        ssh -i ~/.ssh/ec2-key.pem $EC2_USERNAME@$EC2_HOST "
          cd \$HOME/app && 
          echo \"DATABASE_URL=$DATABASE_URL\" > .env &&
          echo \"SECRET_KEY=$SECRET_KEY\" >> .env &&
          
          # Run docker-compose
          docker-compose down || echo 'No existing containers to stop'
          docker-compose up -d --build
        "
