name: Deploy Backend to EC2

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'  

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Configure SSH
      env:
        SSH_PRIVATE_KEY: ${{ secrets.EC2_SSH_KEY }}
      run: |
        mkdir -p ~/.ssh
        # Store the PEM key with proper formatting
        echo "$SSH_PRIVATE_KEY" > ~/.ssh/ec2-key.pem
        chmod 600 ~/.ssh/ec2-key.pem
        # Disable strict host key checking for deployment
        echo "Host *
          StrictHostKeyChecking no
          UserKnownHostsFile=/dev/null" > ~/.ssh/config
          
    - name: Get remote home directory
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      id: get_home
      run: |
        REMOTE_HOME=$(ssh -i ~/.ssh/ec2-key.pem $EC2_USERNAME@$EC2_HOST 'echo $HOME')
        echo "REMOTE_HOME=$REMOTE_HOME" >> $GITHUB_ENV
        echo "Remote home directory: $REMOTE_HOME"

    - name: Create docker-compose.yml
      run: |
        echo 'version: "3"' > docker-compose.yml
        echo '' >> docker-compose.yml
        echo 'services:' >> docker-compose.yml
        echo '  backend:' >> docker-compose.yml
        echo '    build: .' >> docker-compose.yml
        echo '    restart: always' >> docker-compose.yml
        echo '    ports:' >> docker-compose.yml
        echo '      - "8000:8000"' >> docker-compose.yml
        echo '    env_file:' >> docker-compose.yml
        echo '      - ./backend/.env' >> docker-compose.yml
        echo '    volumes:' >> docker-compose.yml
        echo '      - ./backend:/app/backend' >> docker-compose.yml
        echo '    command: ["uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]' >> docker-compose.yml

    - name: Create Dockerfile
      run: |
        echo 'FROM python:3.13-slim' > Dockerfile
        echo '' >> Dockerfile
        echo 'WORKDIR /app' >> Dockerfile
        echo '' >> Dockerfile
        echo '# Install build tools and Cairo dev libraries needed for PyCairo' >> Dockerfile
        echo 'RUN apt-get update && apt-get install -y --no-install-recommends build-essential gcc libcairo2-dev pkg-config && rm -rf /var/lib/apt/lists/*' >> Dockerfile
        echo '' >> Dockerfile
        echo 'COPY backend/requirements.txt .' >> Dockerfile
        echo '# Debug: List files and show requirements.txt content' >> Dockerfile
        echo 'RUN ls -la /app' >> Dockerfile
        echo 'RUN cat /app/requirements.txt' >> Dockerfile
        echo '# Update pip before installing requirements' >> Dockerfile
        echo 'RUN python -m pip install --upgrade pip' >> Dockerfile
        echo 'RUN pip install --no-cache-dir -r requirements.txt' >> Dockerfile
        echo '' >> Dockerfile
        echo 'COPY backend /app/backend' >> Dockerfile
        echo '' >> Dockerfile
        echo 'WORKDIR /app/backend' >> Dockerfile
        echo '' >> Dockerfile
        echo 'RUN chmod +x entrypoint.sh' >> Dockerfile
        echo '' >> Dockerfile
        echo 'CMD ["./entrypoint.sh"]' >> Dockerfile

    - name: Copy files to EC2 using rsync
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        # Create the main app directory
        ssh -i ~/.ssh/ec2-key.pem $EC2_USERNAME@$EC2_HOST "mkdir -p $REMOTE_HOME/app"
        
        # Sync backend directory, excluding __pycache__
        echo "Syncing backend directory..."
        rsync -avz --delete --exclude='__pycache__' -e "ssh -i ~/.ssh/ec2-key.pem" ./backend/ $EC2_USERNAME@$EC2_HOST:$REMOTE_HOME/app/backend/
        
        # Sync docker-compose.yml
        echo "Syncing docker-compose.yml..."
        rsync -avz -e "ssh -i ~/.ssh/ec2-key.pem" ./docker-compose.yml $EC2_USERNAME@$EC2_HOST:$REMOTE_HOME/app/
        
        # Sync Dockerfile
        echo "Syncing Dockerfile..."
        rsync -avz -e "ssh -i ~/.ssh/ec2-key.pem" ./Dockerfile $EC2_USERNAME@$EC2_HOST:$REMOTE_HOME/app/

    - name: Install Docker and Docker Compose on EC2
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
      run: |
        ssh -i ~/.ssh/ec2-key.pem $EC2_USERNAME@$EC2_HOST "
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker.io
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          fi

          # Install Docker Compose if not already installed
          if ! command -v docker-compose &> /dev/null; then
            sudo apt-get update
            sudo apt-get install -y docker-compose-plugin
            sudo ln -s /usr/libexec/docker/cli-plugins/docker-compose /usr/local/bin/docker-compose
          fi
        "

    - name: Deploy with Docker Compose
      env:
        EC2_HOST: ${{ secrets.EC2_HOST }}
        EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
        DB_URL: ${{ secrets.DB_URL }}
        SECRET_KEY: ${{ secrets.SECRET_KEY }}
        POSTMARK_TOKEN: ${{ secrets.POSTMARK_TOKEN }}
        FRONTEND_BASE_URL: ${{ secrets.FRONTEND_BASE_URL }}
        ENVIRONMENT: "production"
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        ssh -i ~/.ssh/ec2-key.pem $EC2_USERNAME@$EC2_HOST "
          # Navigate to the app directory
          cd $REMOTE_HOME/app
          
          # Create the .env file for the backend
          echo 'Creating .env file...'
          echo 'DB_URL=$DB_URL' > ./backend/.env
          echo 'SECRET_KEY=$SECRET_KEY' >> ./backend/.env
          echo 'POSTMARK_TOKEN=$POSTMARK_TOKEN' >> ./backend/.env
          echo 'FRONTEND_BASE_URL=$FRONTEND_BASE_URL' >> ./backend/.env
          echo 'ENV=$ENVIRONMENT' >> ./backend/.env
          echo 'CORS_ORIGINS=https://www.hpgrind.se' >> ./backend/.env
          echo '.env file created.'

          # Stop existing services (if any)
          echo 'Stopping existing containers...'
          docker-compose down
          echo 'Existing containers stopped.'

          
          # Build the new images without cache
          echo 'Building new images...'
          docker-compose build --no-cache
          echo 'Images built.'

          # <<< Run Database Migrations >>>
          echo 'Running database migrations...'
          # Use docker-compose run to execute alembic in a temporary container
          # based on the 'backend' service definition and newly built image.
          # --rm ensures the container is removed after execution.
          docker-compose run --rm backend alembic upgrade head
          echo 'Database migrations completed.'
          # <<< End Migrations >>>

          # Start the new containers in detached mode
          echo 'Starting new containers...'
          docker-compose up -d
          echo 'New containers started.'
          
          # Optional: Cleanup old images/containers (consider if needed)
          echo 'Cleaning up Docker images and containers...'
          docker image prune -af
          docker container prune -f
          echo 'Cleanup complete.'

          echo 'Deployment finished.'
         "