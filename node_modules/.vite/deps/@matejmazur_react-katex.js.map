{
  "version": 3,
  "sources": ["../../@matejmazur/react-katex/src/index.tsx"],
  "sourcesContent": ["import React, {\n  ComponentPropsWithoutRef,\n  useState,\n  useEffect,\n  ReactElement,\n  ElementType,\n  memo,\n} from 'react';\nimport KaTeX, { ParseError, KatexOptions } from 'katex';\n\nconst TeX: React.FC<TeXProps> = ({\n  children,\n  math,\n  block,\n  errorColor,\n  renderError,\n  settings,\n  as: asComponent,\n  ...props\n}) => {\n  const Component = asComponent || (block ? 'div' : 'span');\n  const content = (children ?? math) as string;\n  const [state, setState] = useState<\n    { innerHtml: string } | { errorElement: React.ReactElement }\n  >({ innerHtml: '' });\n\n  useEffect(() => {\n    try {\n      const innerHtml = KaTeX.renderToString(content, {\n        displayMode: !!block,\n        errorColor,\n        throwOnError: !!renderError,\n        ...settings,\n      });\n\n      setState({ innerHtml });\n    } catch (error) {\n      if (error instanceof KaTeX.ParseError || error instanceof TypeError) {\n        if (renderError) {\n          setState({ errorElement: renderError(error) });\n        } else {\n          setState({ innerHtml: error.message });\n        }\n      } else {\n        throw error;\n      }\n    }\n  }, [block, content, errorColor, renderError, settings]);\n\n  if ('errorElement' in state) {\n    return state.errorElement;\n  }\n\n  return (\n    <Component\n      {...props}\n      dangerouslySetInnerHTML={{ __html: state.innerHtml }}\n    />\n  );\n};\n\nexport default memo(TeX);\n\ntype TeXProps = ComponentPropsWithoutRef<'div'> &\n  Partial<{\n    as: ElementType;\n    math: string | number;\n    block: boolean;\n    errorColor: string;\n    renderError: (error: ParseError | TypeError) => ReactElement;\n    settings: KatexOptions;\n  }>;\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;AAUA,IAAA,QAmDeA,aAAAA,MAnDiB,SAAAC,IAAA;AAAA,MAC9BC,KAAAA,GAAAA,UACAC,IAAAA,GAAAA,MACAC,IAAAA,GAAAA,OACAC,IAAAA,GAAAA,YACAC,IAAAA,GAAAA,aACAC,IAAAA,GAAAA,UACIC,IAAAA,GAAJC,IACGC,IAAAA,SAAAA,IAAAA,IAAAA;AAAAA,QAAAA,QAAAA,GAAAA,QAAAA,CAAAA;AAAAA,QAAAA,IAAAA,IAAAA,IAAAA,CAAAA,GAAAA,KAAAA,OAAAA,KAAAA,EAAAA;AAAAA,SAAAA,KAAAA,GAAAA,KAAAA,GAAAA,QAAAA,KAAAA,CAAAA,GAAAA,QAAAA,KAAAA,GAAAA,EAAAA,CAAAA,KAAAA,MAAAA,EAAAA,EAAAA,IAAAA,GAAAA,EAAAA;AAAAA,WAAAA;EAAAA,EAAAA,IAAAA,CAAAA,YAAAA,QAAAA,SAAAA,cAAAA,eAAAA,YAAAA,IAAAA,CAAAA,GAEGC,IAAYH,MAAgBJ,IAAQ,QAAQ,SAC5CQ,IAAAA,QAAWV,KAAAA,KAAYC,GAAAA,QACHU,aAAAA,UAExB,EAAEC,WAAW,GAAA,CAAA,GAFRC,IAAAA,EAAAA,CAAAA,GAAOC,IAAAA,EAAAA,CAAAA;AA2Bd,aAvBAC,aAAAA,WAAU,WAAA;AACR,QAAA;AACE,UAAMH,KAAYI,MAAMC,eAAeP,GAAAA,EAAAA,EACrCQ,aAAAA,CAAAA,CAAehB,GACfC,YAAAA,GACAgB,cAAAA,CAAAA,CAAgBf,EAAAA,GACbC,CAAAA,CAAAA;AAGLS,QAAS,EAAEF,WAAAA,GAAAA,CAAAA;IAAAA,SACJQ,IAAAA;AACP,UAAA,EAAIA,cAAiBJ,MAAMK,cAAcD,cAAiBE,WAOxD,OAAMF;AALJN,QADEV,IACO,EAAEmB,cAAcnB,EAAYgB,EAAAA,EAAAA,IAE5B,EAAER,WAAWQ,GAAMI,QAAAA,CAAAA;IAAAA;EAAAA,GAMjC,CAACtB,GAAOQ,GAASP,GAAYC,GAAaC,CAAAA,CAAAA,GAEzC,kBAAkBQ,IACbA,EAAMU,eAIbE,aAAAA,QAAAA,cAAChB,GAAAA,OAAAA,OAAAA,CAAAA,GACKD,GAAAA,EACJkB,yBAAyB,EAAEC,QAAQd,EAAMD,UAAAA,EAAAA,CAAAA,CAAAA;AAAAA,CAAAA;AAAAA,IAAAA,wBAAAA;",
  "names": ["memo", "e", "children", "math", "block", "errorColor", "renderError", "settings", "asComponent", "as", "props", "Component", "content", "useState", "innerHtml", "state", "setState", "useEffect", "KaTeX", "renderToString", "displayMode", "throwOnError", "error", "ParseError", "TypeError", "errorElement", "message", "React", "dangerouslySetInnerHTML", "__html"]
}
